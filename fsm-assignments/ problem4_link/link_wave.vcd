$date
	Sun Aug 17 22:32:20 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_link_top $end
$var wire 1 ! ack $end
$var wire 8 " data [7:0] $end
$var wire 1 # req $end
$var wire 1 $ done $end
$var reg 1 % ack_prev $end
$var reg 1 & clk $end
$var reg 1 ' rst $end
$var integer 32 ( ack_hold [31:0] $end
$var integer 32 ) n_bytes [31:0] $end
$scope module dut $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 8 * slv_last_byte [7:0] $end
$var wire 1 + req $end
$var wire 1 $ done $end
$var wire 8 , data_bus [7:0] $end
$var wire 1 - ack $end
$scope module u_master $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 1 - ack $end
$var parameter 3 . S_DONE $end
$var parameter 3 / S_DROP_REQ $end
$var parameter 3 0 S_IDLE $end
$var parameter 3 1 S_REQ $end
$var parameter 3 2 S_WAIT_ACK $end
$var parameter 3 3 S_WAIT_ACK0 $end
$var reg 2 4 byte_idx [1:0] $end
$var reg 8 5 data [7:0] $end
$var reg 1 $ done $end
$var reg 1 + req $end
$var reg 3 6 state [2:0] $end
$upscope $end
$scope module u_slave $end
$var wire 1 & clk $end
$var wire 8 7 data_in [7:0] $end
$var wire 1 + req $end
$var wire 1 8 req_rise $end
$var wire 1 ' rst $end
$var parameter 2 9 R_ACK_HOLD $end
$var parameter 2 : R_IDLE $end
$var parameter 2 ; R_WAIT_REQ0 $end
$var reg 1 - ack $end
$var reg 2 < hold_cnt [1:0] $end
$var reg 8 = last_byte [7:0] $end
$var reg 1 > req_d $end
$var reg 2 ? state [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 ;
b0 :
b1 9
b100 3
b10 2
b1 1
b0 0
b11 /
b101 .
$end
#0
$dumpvars
bx ?
x>
bx =
bx <
x8
bx 7
bx 6
bx 5
bx 4
x-
bx ,
x+
bx *
b0 )
b0 (
1'
0&
0%
x$
x#
bx "
x!
$end
#5000
08
b0 4
0$
b0 "
b0 ,
b0 5
b0 7
0#
0+
b0 6
b0 <
b0 *
b0 =
0!
0-
0>
b0 ?
x%
1&
#10000
0&
#15000
0%
1&
#20000
0&
#25000
18
b1 6
1#
1+
b10100000 "
b10100000 ,
b10100000 5
b10100000 7
0'
1&
#30000
0&
#35000
08
b1 ?
b10 <
1!
1-
b10100000 *
b10100000 =
1>
b10 6
1&
#40000
0&
#45000
b11 6
0#
0+
b1 <
1%
b1 (
1&
#50000
0&
#55000
b10 ?
b0 <
0>
b100 6
b10 (
1&
#60000
0&
#65000
b0 ?
0!
0-
b11 (
1&
#70000
0&
#75000
18
0%
b1 6
1#
1+
b10100001 "
b10100001 ,
b10100001 5
b10100001 7
b1 4
b1 )
b0 (
1&
#80000
0&
#85000
08
b10 6
b1 ?
b10 <
1!
1-
b10100001 *
b10100001 =
1>
1&
#90000
0&
#95000
1%
b1 <
b11 6
0#
0+
b1 (
1&
#100000
0&
#105000
b100 6
b10 ?
b0 <
0>
b10 (
1&
#110000
0&
#115000
b0 ?
0!
0-
b11 (
1&
#120000
0&
#125000
18
b1 6
1#
1+
b10100010 "
b10100010 ,
b10100010 5
b10100010 7
b10 4
0%
b10 )
b0 (
1&
#130000
0&
#135000
08
b1 ?
b10 <
1!
1-
b10100010 *
b10100010 =
1>
b10 6
1&
#140000
0&
#145000
b11 6
0#
0+
b1 <
1%
b1 (
1&
#150000
0&
#155000
b10 ?
b0 <
0>
b100 6
b10 (
1&
#160000
0&
#165000
b0 ?
0!
0-
b11 (
1&
#170000
0&
#175000
18
0%
b1 6
1#
1+
b10100011 "
b10100011 ,
b10100011 5
b10100011 7
b11 4
b11 )
b0 (
1&
#180000
0&
#185000
08
b10 6
b1 ?
b10 <
1!
1-
b10100011 *
b10100011 =
1>
1&
#190000
0&
#195000
1%
b1 <
b11 6
0#
0+
b1 (
1&
#200000
0&
#205000
b100 6
b10 ?
b0 <
0>
b10 (
1&
#210000
0&
#215000
b0 ?
0!
0-
b11 (
1&
#220000
0&
#225000
b101 6
1$
0%
b100 )
b0 (
1&
#230000
0&
#235000
0$
1&
